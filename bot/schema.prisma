// schema.prisma
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model BotAlive {
    id          Int         @id @default(autoincrement())
    name        String
    client_id   String
    create_at   DateTime    @default(now())
}

model Ticket {
    guild_id    String  @id
    category_id String?
    role_id     String
    channel_id  String 
    expire_time BigInt? @default(0)
    notification_channel_id String?
    notification_role_id String?

    TicketLog TicketLog[]
}

model TicketLog {
    logs_id     Int         @id @default(autoincrement())
    ticket_id   String      @unique
    title       String
    description String?
    guild_id    String
    user_id     String
    created_by  String
    channel_id  String
    status      String      @default("open")
    created_at  DateTime    @default(now())
    closed_at   DateTime?
    expire_in   BigInt?
    warn_expire Boolean? @default(false)

    ticket Ticket @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

    MessageLog MessageLog[]
}

model MessageLog {
    id          Int     @id @default(autoincrement())
    message_id String
    ticket_id  String
    user_id    String
    username   String
    content    String?
    created_at DateTime
    fetch_at   DateTime @default(now())

    ticket TicketLog @relation(fields: [ticket_id], references: [ticket_id], onDelete: Cascade)
}

model UserLog {
    id              Int      @id @default(autoincrement())
    user_id         String
    username        String
    action          String
    timestamp       DateTime @default(now())
    server_id       String
    channel_id      String?
    status          String?
    message_content String?
}

model User {
    id    Int    @id @default(autoincrement())
    name  String
    email String @unique
    age   Int?
}

model AutoCreateRoom {
    guild_id    String  @id
    wait_channel_id String
    create_category_id String
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt
}

model PrivateRoom {
    guild_id    String  @id
    channel_id  String
    category_id String
    role_id     String
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt

    PrivateRoomChannel PrivateRoomChannel[]
}

model PrivateRoomChannel {
    id          Int      @id @default(autoincrement())
    channel_id  String   @unique
    guild_id    String
    created_by  String
    name        String
    description String?
    type        String
    role_id     String?
    created_at  DateTime @default(now())
    deleted_at  DateTime?

    private_room PrivateRoom @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)
}

model serverSettings {
    guildId           String    @id
    verifyRoleId      String?
    verifyLogChannelId String?
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt

    userVerifications userVerification[]
}

model userVerification {
    userId        String
    guildId       String
    status        String      // pending, verified, rejected
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    verifiedAt    DateTime?

    server serverSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

    @@id([userId, guildId])
}

model memberRequest {
    memberId    String
    guildId     String
    status      String      // pending, approved, rejected, cancel
    requestData String?     // JSON string ข้อมูลเพิ่มเติม
    requestedAt DateTime    @default(now())
    updatedAt   DateTime    @updatedAt @default(now())

    @@id([memberId, guildId])
}
