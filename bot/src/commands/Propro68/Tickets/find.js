const { ChatInputCommandInteraction, StringSelectMenuBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder, PermissionsBitField } = require("discord.js");
const DiscordBot = require("../../../client/DiscordBot");
const { prisma } = require("../../../utils/Database");

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πã‡∏ß‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
 * @param {ChatInputCommandInteraction} interaction 
 * @param {Object} pageData 
 */
async function displayTicketPage(interaction, pageData) {
    const { options, currentPage, pageSize, totalPages, filter } = pageData;

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏
    let filteredOptions = options;
    if (filter === 'open') {
        filteredOptions = options.filter(option => option.emoji === 'üü¢');
    } else if (filter === 'closed') {
        filteredOptions = options.filter(option => option.emoji === 'üî¥');
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
    const filteredTotalPages = Math.ceil(filteredOptions.length / pageSize);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
    const adjustedCurrentPage = Math.min(currentPage, filteredTotalPages - 1);

    // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const start = adjustedCurrentPage * pageSize;
    const end = start + pageSize;
    const pageOptions = filteredOptions.slice(start, end);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á embed
    const embed = new EmbedBuilder()
        .setTitle("‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà")
        .setDescription(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á (‡∏´‡∏ô‡πâ‡∏≤ ${adjustedCurrentPage + 1}/${filteredTotalPages || 1}):`)
        .setColor(0x0099FF);

    if (filteredOptions.length === 0) {
        embed.setDescription("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å");
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á select menu
    const selectMenu = new StringSelectMenuBuilder()
        .setCustomId('view-ticket')
        .setPlaceholder('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß')
        .addOptions(pageOptions.length > 0 ? pageOptions : [{
            label: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ',
            description: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å',
            value: 'no_ticket'
        }]);

    // ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    const navButtons = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId('prev-page')
            .setLabel('‚óÄ ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤')
            .setStyle(ButtonStyle.Secondary)
            .setDisabled(adjustedCurrentPage === 0),
        new ButtonBuilder()
            .setCustomId('next-page')
            .setLabel('‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚ñ∂')
            .setStyle(ButtonStyle.Secondary)
            .setDisabled(adjustedCurrentPage >= filteredTotalPages - 1 || filteredOptions.length === 0)
    );

    // ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const filterButtons = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId('filter-open')
            .setLabel('‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà')
            .setStyle(filter === 'open' ? ButtonStyle.Primary : ButtonStyle.Success)
            .setEmoji('üü¢'),
        new ButtonBuilder()
            .setCustomId('filter-closed')
            .setLabel('‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß')
            .setStyle(filter === 'closed' ? ButtonStyle.Primary : ButtonStyle.Danger)
            .setEmoji('üî¥'),
        new ButtonBuilder()
            .setCustomId('filter-all')
            .setLabel('‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
            .setStyle(filter === 'all' ? ButtonStyle.Primary : ButtonStyle.Secondary)
            .setEmoji('üìã')
    );

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const messagePayload = {
        embeds: [embed],
        components: [
            new ActionRowBuilder().addComponents(selectMenu),
            navButtons,
            filterButtons
        ],
        ephemeral: true
    };

    if (interaction.replied || interaction.deferred) {
        await interaction.editReply(messagePayload);
    } else {
        await interaction.reply(messagePayload);
    }
}

/**
 * Subcommand handler for ticket find
 * @param {DiscordBot} client 
 * @param {ChatInputCommandInteraction} interaction 
 */
module.exports = async (client, interaction) => {
    if (!interaction.member.permissions.has(PermissionsBitField.Flags.ModerateMembers) && !interaction.member.roles.cache.some(role => role.name.startsWith('{') || role.name.endsWith('}'))) {
        return interaction.reply({
            content: "You do not have permission to use this command.",
            ephemeral: true
        });
    }
    const showClosed = interaction.options.getBoolean('show_closed') ?? true; // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏î‡πâ‡∏ß‡∏¢
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    const tickets = await prisma.ticketLog.findMany({
        where: {
            guild_id: interaction.guildId,
            ...(showClosed ? {} : { status: 'open' })
        },
        orderBy: { created_at: 'desc' }
    });

    if (tickets.length === 0) {
        return await interaction.reply({
            content: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ",
            ephemeral: true
        });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á collection ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö user ID -> tickets ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ
    const ticketCollection = new Map();
    interaction.client.ticketsPageData = interaction.client.ticketsPageData || ticketCollection;
    const userId = interaction.user.id;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const allTicketOptions = await Promise.all(tickets.map(async ticket => {
        const fetchedUser = await client.users.fetch(ticket.user_id).catch(() => null);
        const username = fetchedUser ? fetchedUser.username : '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å';

        return {
            label: `${ticket.title.substring(0, 80)} (${username})`,
            description: `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${ticket.status === 'open' ? '‡πÄ‡∏õ‡∏¥‡∏î' : '‡∏õ‡∏¥‡∏î'} | ${new Date(ticket.created_at).toLocaleDateString("th-TH")}`,
            value: ticket.ticket_id,
            emoji: ticket.status === 'open' ? 'üü¢' : 'üî¥'
        };
    }));

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
    const pageSize = 25; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
    const pageData = {
        options: allTicketOptions,
        currentPage: 0,
        pageSize: pageSize,
        totalPages: Math.ceil(allTicketOptions.length / pageSize),
        filter: 'all' // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    };

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
    interaction.client.ticketsPageData.set(userId, pageData);

    await displayTicketPage(interaction, pageData);
};

// Export ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô displayTicketPage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
module.exports.displayTicketPage = displayTicketPage;
