const { ChatInputCommandInteraction, StringSelectMenuBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder, PermissionsBitField } = require("discord.js");
const DiscordBot = require("../../../client/DiscordBot");
const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient()
/**
 * Subcommand handler for ticket find
 * @param {DiscordBot} client 
 * @param {ChatInputCommandInteraction} interaction 
 */
module.exports = async (client, interaction) => {
    if (!interaction.member.permissions.has(PermissionsBitField.Flags.ModerateMembers) && !interaction.member.roles.cache.some(role => role.name.startsWith('{') || role.name.endsWith('}'))) {
        return interaction.reply({
            content: "You do not have permission to use this command.",
            ephemeral: true
        });
    }
    const showClosed = interaction.options.getBoolean('show_closed') ?? true; // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏î‡πâ‡∏ß‡∏¢
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    const tickets = await prisma.ticketLog.findMany({
        where: {
            guild_id: interaction.guildId,
            ...(showClosed ? {} : { status: 'open' })
        },
        orderBy: { created_at: 'desc' }
    });

    if (tickets.length === 0) {
        return await interaction.reply({
            content: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ",
            ephemeral: true
        });
    }

    const ticketOptions = await Promise.all(tickets.map(async ticket => {
        const fetchedUser = await client.users.fetch(ticket.user_id).catch(() => null);
        const username = fetchedUser ? fetchedUser.username : '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å';

        return {
            label: `${ticket.title.substring(0, 80)} (${username})`,
            description: `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${ticket.status === 'open' ? '‡πÄ‡∏õ‡∏¥‡∏î' : '‡∏õ‡∏¥‡∏î'} | ${new Date(ticket.created_at).toLocaleDateString("th-TH")}`,
            value: ticket.ticket_id,
            emoji: ticket.status === 'open' ? 'üü¢' : 'üî¥'
        };
    }));

    const embed = new EmbedBuilder()
        .setTitle("‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà")
        .setDescription("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á:")
        .setColor(0x0099FF);

    const selectMenu = new StringSelectMenuBuilder()
        .setCustomId('view-ticket')
        .setPlaceholder('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß')
        .addOptions(ticketOptions);

    const filterButtons = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId('filter-open')
            .setLabel('‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà')
            .setStyle(ButtonStyle.Success)
            .setEmoji('üü¢'),
        new ButtonBuilder()
            .setCustomId('filter-closed')
            .setLabel('‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß')
            .setStyle(ButtonStyle.Danger)
            .setEmoji('üî¥'),
        new ButtonBuilder()
            .setCustomId('filter-all')
            .setLabel('‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('üìã')
    );

    await interaction.reply({
        embeds: [embed],
        components: [new ActionRowBuilder().addComponents(selectMenu), filterButtons],
        ephemeral: true
    });
};
