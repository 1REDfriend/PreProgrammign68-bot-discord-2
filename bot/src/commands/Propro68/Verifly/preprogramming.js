const { EmbedBuilder, ChatInputCommandInteraction } = require("discord.js");
const DiscordBot = require("../../../client/DiscordBot");
const { info, error } = require("../../../utils/Console");
const ENV = require("../../../config/env");
const { prisma } = require("../../../utils/Database");
const axios = require("axios");

/**
 * Subcommand handler for verifly preprogramming
 * @param {DiscordBot} client 
 * @param {ChatInputCommandInteraction} interaction 
 */
module.exports = async (client, interaction) => {
    await interaction.deferReply({ ephemeral: true });

    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ role ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const serverSettings = await prisma.serverSettings.findUnique({
            where: { guildId: interaction.guildId }
        });

        if (!serverSettings || !serverSettings.verifyRoleId) {
            return interaction.editReply({
                content: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ role ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö'
            });
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        await prisma.userVerification.upsert({
            where: {
                userId_guildId: {
                    userId: interaction.user.id,
                    guildId: interaction.guildId
                }
            },
            update: {
                status: 'pending',
                updatedAt: new Date()
            },
            create: {
                userId: interaction.user.id,
                guildId: interaction.guildId,
                status: 'pending',
                createdAt: new Date(),
                updatedAt: new Date()
            }
        });

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
        const verifyUrl = `${ENV.verify.studentLink}${interaction.user.id}`;

        const response = await axios.get(verifyUrl, {
            headers: {
                'Authorization': `Bearer ${ENV.verify.authToken}`
            }
        });

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        if (response.data.error) {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô rejected
            await prisma.userVerification.update({
                where: {
                    userId_guildId: {
                        userId: interaction.user.id,
                        guildId: interaction.guildId
                    }
                },
                data: {
                    status: 'rejected',
                    updatedAt: new Date()
                }
            });

            // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const errorEmbed = new EmbedBuilder()
                .setTitle('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
                .setDescription('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á')
                .setColor(0xFF0000)
                .setFooter({ text: 'Verification Failed' })
                .setTimestamp();

            await interaction.editReply({ embeds: [errorEmbed] });
            return;
        }

        // ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô verified
        await prisma.userVerification.update({
            where: {
                userId_guildId: {
                    userId: interaction.user.id,
                    guildId: interaction.guildId
                }
            },
            data: {
                status: 'verified',
                verifiedAt: new Date(),
                updatedAt: new Date()
            }
        });

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° role ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        const role = interaction.guild.roles.cache.get(serverSettings.verifyRoleId);
        if (role) {
            await interaction.member.roles.add(role);
        }

        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå server
        const userData = await response.data.camper[0].user;
        if (userData && userData.nickname && userData.fisrtName) {
            const newNickname = `${userData.nickname} ${userData.fisrtName}`;
            await interaction.member.setNickname(newNickname);
        } else throw new Error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å API');

        // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        const successEmbed = new EmbedBuilder()
            .setTitle('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
            .setDescription('‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß')
            .setColor(0x00FF00)
            .setFooter({ text: 'Verification Complete' })
            .setThumbnail(interaction.user.displayAvatarURL())
            .setTimestamp();

        await interaction.editReply({ embeds: [successEmbed] });

        // ‡∏™‡πà‡∏á logs ‡πÑ‡∏õ‡∏¢‡∏±‡∏á channel ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (serverSettings.verifyLogChannelId) {
            const logChannel = interaction.guild.channels.cache.get(serverSettings.verifyLogChannelId);
            if (logChannel) {
                const logEmbed = new EmbedBuilder()
                    .setTitle('‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
                    .setDescription(`‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ **${interaction.user.username}** ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`)
                    .addFields(
                        { name: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', value: `<@${interaction.user.id}>`, inline: true },
                        { name: '‡πÑ‡∏≠‡∏î‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', value: interaction.user.id, inline: true },
                        { name: '‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', value: newNickname, inline: true },
                        { name: '‡πÄ‡∏ß‡∏•‡∏≤', value: new Date().toLocaleString('th-TH'), inline: false }
                    )
                    .setColor(0x00FF00)
                    .setThumbnail(interaction.user.displayAvatarURL())
                    .setFooter({ text: 'Verification Logs' })
                    .setTimestamp();

                await logChannel.send({ embeds: [logEmbed] });
            }
        }

    } catch (err) {
        error(`Verification error: ${err.message}`);

        const serverSettings = await prisma.serverSettings.findUnique({
            where: { guildId: interaction.guildId }
        });

        if (serverSettings && serverSettings.verifyLogChannelId) {
            const logChannel = interaction.guild.channels.cache.get(serverSettings.verifyLogChannelId);
            if (logChannel) {
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏•‡πá‡∏≠‡∏Å
                const userTag = interaction.user.tag || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠';
                const userId = interaction.user.id;
                const userAvatar = interaction.user.displayAvatarURL({ dynamic: true, size: 128 });
                const errorMsg = err.message || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏';
                const currentTime = new Date().toLocaleString('th-TH', {
                    timeZone: 'Asia/Bangkok',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                });

                const logEmbed = new EmbedBuilder()
                    .setTitle('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
                    .setDescription(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö`)
                    .addFields(
                        { name: 'üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', value: `<@${userId}> (${userTag})`, inline: true },
                        { name: 'üÜî ‡πÑ‡∏≠‡∏î‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', value: userId, inline: true },
                        { name: '‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤', value: currentTime, inline: true },
                        { name: '‚ùì ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', value: `\`\`\`${errorMsg}\`\`\``, inline: false }
                    )
                    .setColor(0xFF0000)
                    .setThumbnail(userAvatar)
                    .setFooter({ text: 'Verification Error Log' })
                    .setTimestamp();

                await logChannel.send({ embeds: [logEmbed] });
                info(`Sent error log for user ${userTag} (${userId}) to the log channel`);
            }
        }

        const errorEmbed = new EmbedBuilder()
            .setTitle('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
            .setDescription('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö')
            .setColor(0xFF0000)
            .setFooter({ text: 'Verification Error' })
            .setTimestamp();

        return interaction.editReply({ embeds: [errorEmbed] });
    }
}; 