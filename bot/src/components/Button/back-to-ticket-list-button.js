const { ButtonInteraction } = require("discord.js");
const DiscordBot = require("../../client/DiscordBot");
const Component = require("../../structure/Component");
const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();

module.exports = new Component({
    customId: 'back-to-ticket-list',
    type: 'button',
    /**
     * 
     * @param {DiscordBot} client 
     * @param {ButtonInteraction} interaction 
     */
    run: async (client, interaction) => {
        try {
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
            const tickets = await prisma.ticketLog.findMany({
                where: { 
                    guild_id: interaction.guildId
                },
                orderBy: { created_at: 'desc' }
            });

            if (tickets.length === 0) {
                return await interaction.update({
                    content: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ",
                    embeds: [],
                    components: [],
                    ephemeral: true
                });
            }

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            const allTicketOptions = await Promise.all(tickets.map(async ticket => {
                const fetchedUser = await client.users.fetch(ticket.user_id).catch(() => null);
                const username = fetchedUser ? fetchedUser.username : '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å';

                return {
                    label: `${ticket.title.substring(0, 80)} (${username})`,
                    description: `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${ticket.status === 'open' ? '‡πÄ‡∏õ‡∏¥‡∏î' : '‡∏õ‡∏¥‡∏î'} | ${new Date(ticket.created_at).toLocaleDateString("th-TH")}`,
                    value: ticket.ticket_id,
                    emoji: ticket.status === 'open' ? 'üü¢' : 'üî¥'
                };
            }));

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á collection ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
            const userId = interaction.user.id;
            client.ticketsPageData = client.ticketsPageData || new Map();

            // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
            const pageSize = 25; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
            const pageData = {
                options: allTicketOptions,
                currentPage: 0,
                pageSize: pageSize,
                totalPages: Math.ceil(allTicketOptions.length / pageSize),
                filter: 'all' // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            };

            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
            client.ticketsPageData.set(userId, pageData);

            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô displayTicketPage ‡∏à‡∏≤‡∏Å find.js
            const findTicketsHandler = require('../../commands/Propro68/Tickets/find');
            if (typeof findTicketsHandler.displayTicketPage === 'function') {
                await findTicketsHandler.displayTicketPage(interaction, pageData);
            } else {
                console.error('Error: displayTicketPage function not found in find.js');
                await interaction.update({
                    content: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πã‡∏ß`,
                    components: [],
                    ephemeral: true
                });
            }
        } catch (err) {
            console.error(`Error handling back-to-ticket-list: ${err}`);
            await interaction.update({
                content: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πã‡∏ß: ${err.message}`,
                components: [],
                ephemeral: true
            });
        }
    }
}).toJSON(); 