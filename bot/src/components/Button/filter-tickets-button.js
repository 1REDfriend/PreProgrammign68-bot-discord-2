const { ButtonInteraction, StringSelectMenuBuilder, ActionRowBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");
const DiscordBot = require("../../client/DiscordBot");
const Component = require("../../structure/Component");
const { prisma } = require("../../utils/Database");

module.exports = new Component({
    customId: /^filter-(open|closed|all)$/,
    type: 'button',
    /**
     * 
     * @param {DiscordBot} client 
     * @param {ButtonInteraction} interaction 
     */
    run: async (client, interaction) => {
        try {
            const filterType = interaction.customId.split('-')[1]; // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á (open, closed, all)
            
            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
            let whereCondition = { guild_id: interaction.guildId };
            
            if (filterType === 'open') {
                whereCondition.status = 'open';
            } else if (filterType === 'closed') {
                whereCondition.status = 'closed';
            }
            
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏±‡πã‡∏ß‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
            const tickets = await prisma.ticketLog.findMany({
                where: whereCondition,
                orderBy: { created_at: 'desc' }
            });

            if (tickets.length === 0) {
                return await interaction.update({
                    content: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà${filterType === 'open' ? '‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà' : filterType === 'closed' ? '‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß' : ''}‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ`,
                    embeds: [],
                    components: [createFilterButtons()],
                    ephemeral: true
                });
            }

            const ticketOptions = await Promise.all(tickets.map(async ticket => {
                const fetchedUser = await client.users.fetch(ticket.user_id).catch(() => null);
                const username = fetchedUser ? fetchedUser.username : '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å';

                return {
                    label: `${ticket.title.substring(0, 80)} (${username})`,
                    description: `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${ticket.status === 'open' ? '‡πÄ‡∏õ‡∏¥‡∏î' : '‡∏õ‡∏¥‡∏î'} | ${new Date(ticket.created_at).toLocaleDateString("th-TH")}`,
                    value: ticket.ticket_id,
                    emoji: ticket.status === 'open' ? 'üü¢' : 'üî¥'
                };
            }));

            const embed = new EmbedBuilder()
                .setTitle(`‡∏ï‡∏±‡πã‡∏ß${filterType === 'open' ? '‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà' : filterType === 'closed' ? '‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß' : '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'}`)
                .setDescription(`‡∏û‡∏ö ${tickets.length} ‡∏ï‡∏±‡πã‡∏ß${filterType === 'open' ? '‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà' : filterType === 'closed' ? '‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß' : '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'}:`)
                .setColor(filterType === 'open' ? 0x00FF00 : filterType === 'closed' ? 0xFF0000 : 0x0099FF);

            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('view-ticket')
                .setPlaceholder('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß')
                .addOptions(ticketOptions);

            await interaction.update({
                content: null,
                embeds: [embed],
                components: [
                    new ActionRowBuilder().addComponents(selectMenu),
                    createFilterButtons(filterType)
                ],
                ephemeral: true
            });
        } catch (err) {
            console.error(`Error handling filter-tickets: ${err}`);
            await interaction.update({
                content: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß: ${err.message}`,
                components: [],
                ephemeral: true
            });
        }
    }
}).toJSON();

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß
 * @param {string} activeFilter ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
 * @returns {ActionRowBuilder} ‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏á
 */
function createFilterButtons(activeFilter = null) {
    return new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId('filter-open')
            .setLabel('‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà')
            .setStyle(activeFilter === 'open' ? ButtonStyle.Primary : ButtonStyle.Success)
            .setEmoji('üü¢')
            .setDisabled(activeFilter === 'open'),
        new ButtonBuilder()
            .setCustomId('filter-closed')
            .setLabel('‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß')
            .setStyle(activeFilter === 'closed' ? ButtonStyle.Primary : ButtonStyle.Danger)
            .setEmoji('üî¥')
            .setDisabled(activeFilter === 'closed'),
        new ButtonBuilder()
            .setCustomId('filter-all')
            .setLabel('‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
            .setStyle(activeFilter === 'all' ? ButtonStyle.Primary : ButtonStyle.Secondary)
            .setEmoji('üìã')
            .setDisabled(activeFilter === 'all')
    );
} 